{"componentChunkName":"component---src-components-post-index-js","path":"/publish-package-to-npx","webpackCompilationHash":"40f907dc35320ba1e9c9","result":{"data":{"markdownRemark":{"html":"<p>I find myself creating presentation slides every now and again. Everytime I\ndo so, I somewhat reinvent the wheel in an attempt to streamline my work. I\ntried Jekyll, Impress.js, Angular, Prezi, Powerpoint ... the list goes on.</p>\n<p>After using <code class=\"language-text\">create-react-app</code> a few times, it struck me, why not have an NPX\npackage that creates a slide deck template letting me concentrate on writting\nthe content of my presentation with all of Reacts' (and family) super powers.</p>\n<p>Anyway, this is only an example of a use case for an NPX package (hope this\ninspired you) lets get to the nitty gritty of how to build one.</p>\n<p>Creating an NPX package is no different then creating a standard NPM package,\nthe only thing you really need to know is that you must add a <code class=\"language-text\">bin</code> command to\nthe root of your <code class=\"language-text\">package.json</code> file. So it looks a little like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;name&quot;: &quot;@jbonigomes/some-package&quot;,\n  &quot;version&quot;: &quot;5.5.5&quot;,\n  &quot;bin&quot;: {\n    &quot;some-package&quot;: &quot;./some-file.js&quot;\n  },\n  // ... rest of package.json\n}</code></pre></div>\n<p>Note that the name of the package is the same as the name of the bin command,\nthis command will then be available via NPX, in my case, I am namespacing it\nunder my NPM username <code class=\"language-text\">@jbonigomes</code>, but you don't have to.</p>\n<p>In the case of my example (that creates a React presentation), I wanted the bin\nscript to <code class=\"language-text\">git clone</code> my package, then <code class=\"language-text\">npm install</code> all of it's dependencies.\nRemember this runs in a <code class=\"language-text\">node.js</code> environment, so all those goodies are\navailable out of the box, in my case <code class=\"language-text\">spawnSync</code> from <code class=\"language-text\">child_process</code> was\nexactly what I needed:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#! /usr/bin/env node\n\n&#39;use strict&#39;;\n\nconst appName = process.argv[2];\nconst { spawnSync } = require(&#39;child_process&#39;);\nconst url = &#39;git@github.com:jbonigomes/create-react-slides.git&#39;;\n\nspawnSync(&#39;git&#39;, [&#39;clone&#39;, url, `${process.cwd()}/${appName}`]);\nspawnSync(&#39;npm&#39;, [&#39;install&#39;, &#39;--prefix&#39;, `${process.cwd()}/${appName}`]);\n\nconsole.log(&#39;Your app has been successfully installed&#39;);\nconsole.log(`$ cd ${appName}`);\nconsole.log(&#39;$ npm start&#39;);</code></pre></div>\n<p>If you want to try that package, you can run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx @jbonigomes/create-react-slides some-presentation</code></pre></div>\n<p>Note that <code class=\"language-text\">some-presentation</code> will be fed as <code class=\"language-text\">process.argv[2]</code> into the script\nabove.</p>\n<p>Also, note the usage of <code class=\"language-text\">#! /usr/bin/env node</code> when I first deployed my package,\nI didn't realise that without it, the whole piece wouldn't work.</p>\n<p>Before I wrap up, you can find the source code for the package here:</p>\n<p><a href=\"create-react-slides\">https://github.com/jbonigomes/create-react-slides</a></p>\n<p>I will be updating it as more handy <code class=\"language-text\">components</code> are created.</p>","frontmatter":{"path":"/publish-package-to-npx","title":"Publish package to NPX","date":"September 01, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}